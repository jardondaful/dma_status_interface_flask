- hosts: localhost
  tasks:

  - name: Gather facts
    ansible.builtin.setup:

  - name: Print hostname
    ansible.builtin.debug:
      var: ansible_hostname

# Other tasks go here...

  - name: Get IP address
    shell: |
      IP=$(ifconfig en0 | grep 'inet ' | cut -d' ' -f2)
      echo $IP
    register: ip_address

  - name: Outputting IP Address When Connected to Ethernet
    set_fact:
      ipv4_address: "{{ ip_address.stdout }}"

  - name: Get CPU
    shell: sysctl -n machdep.cpu.brand_string
    register: cpu

  - name: Outputting CPU
    set_fact:
      cpu_info: "{{ cpu.stdout }}"

  - name: Get memory information
    shell: df -h / | tail -1
    register: memory_info

 
  - name: Add storage values
    set_fact:
      storage_total: "{{ memory_info.stdout.split()[0] }}"
      storage_used: "{{ memory_info.stdout.split()[1] }}"
      storage_avail: "{{ memory_info.stdout.split()[2] }}"
      storage_use_percent: "{{ memory_info.stdout.split()[3] }}"

  - name: Get used RAM in GB
    shell: |
      #!/bin/bash

      # Get the amount of memory used by all processes
      memory_used=$(ps -A -o rss | awk '{sum+=$1} END {print sum}')

      # Get the amount of swap memory used
      swap_used=$(vm_stat | grep 'Pages swapins:' | awk '{print $1 * 4 * 1024}')

      # Check if the amount of swap memory used is available
      if [[ -z "$swap_used" ]]; then
        # If not, assume 0
        swap_used=0
      fi

      # Add the swap memory used to the total amount of memory used
      total_memory_used=$(($memory_used + $swap_used))

      # Convert the total memory used to gigabytes
      memory_used_gb=$(echo "scale=2; $total_memory_used / 1024 / 1024" | bc)

      # Display the result
      printf "%.2f GB\n" $memory_used_gb

    register: used_ram

  - name: Outputting Used RAM
    set_fact:
      used_ram_info: "{{ used_ram.stdout }}"

  - name: Check OS family
    set_fact:
      computer_type: "Mac"
    when: "'Darwin' in ansible_system"

  - name: Check for PC or Custom Build (Asus)
    set_fact:
      computer_type: "PC or Custom Build (Asus)"
    when: "'Linux' in ansible_system or 'Windows' in ansible_system"

  - name: Get serial number on Linux
    ansible.builtin.shell: "sudo dmidecode -s system-serial-number"
    register: serial_number
    when: "ansible_os_family == 'Debian' or ansible_os_family == 'RedHat'"

  - name: Get serial number on macOS
    block:
      - shell: "/usr/sbin/system_profiler SPHardwareDataType | awk '/Serial Number/{print $NF}'"
        register: serial_number
        changed_when: false
        ignore_errors: true
      - debug:
          var: serial_number.stdout_lines
    when: "'Darwin' in ansible_system and ansible_system.lower() == 'darwin'"
    environment:
      ANSIBLE_DEBUG: "1"


  - name: Update serial number in SQLite database for macOS
    shell: |
      sqlite3 /Users/jardondaful/Downloads/flask_test/database.sqlite <<EOF
      UPDATE system_info SET serial_number = '{{ serial_number.stdout_lines | first }}' WHERE computer_type = 'Mac' AND id = (SELECT MAX(id) FROM system_info);
      EOF
    when: serial_number.stdout_lines is defined and "'Darwin' in ansible_system and ansible_system.lower() == 'darwin'"

  - name: Get serial number on Windows
    ansible.windows.win_shell: "(Get-WmiObject -Class Win32_BIOS).SerialNumber"
    register: serial_number
    when: "ansible_os_family == 'Windows'"

  - name: Insert data into SQLite database
    ansible.builtin.shell: |
      sqlite3 /Users/jardondaful/Downloads/flask_test/database.sqlite <<EOF
      CREATE TABLE IF NOT EXISTS system_info (
        hostname TEXT,
        id INTEGER PRIMARY KEY,
        ipv4_address TEXT,
        cpu_info TEXT,
        storage_total TEXT,
        storage_used TEXT,
        storage_avail TEXT,
        used_ram_info TEXT,
        computer_type TEXT,
        serial_number TEXT
      );

      INSERT INTO system_info (hostname, ipv4_address, cpu_info, storage_total, storage_used, storage_avail, used_ram_info, computer_type, serial_number)
      VALUES ('{{ ansible_hostname }}', '{{ ipv4_address }}', '{{ cpu_info }}', '{{ storage_total }}', '{{ storage_used }}', '{{ storage_avail }}', '{{ used_ram_info }}', '{{ computer_type }}', '{% if serial_number is defined and serial_number.stdout is defined %}{{ '{0}'.format(serial_number.stdout) }}{% endif %}');

      EOF
    when: ansible_os_family == 'Darwin' or ansible_os_family == 'Windows'
    ignore_errors: true

  - name: Remove newline at the end of the file
    ansible.builtin.lineinfile:
      path: /Users/jardondaful/Downloads/dma-status-interface-02-23-2022/public/output.txt
      state: absent
      regexp: '^$'
    register: output_result

